<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd">
		
<!-- Property placeholer configurer. this bean helps in replacing the property values from an external property file -->
    <bean id="propertyPlaceholderConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer" >
        <property name="locations" >
           <value>classpath:config.properties</value>
        </property>
    </bean>
 
   <!-- hibernate configuration property file -->
 <bean id="hibernateConfigProperties" class="org.springframework.beans.factory.config.PropertiesFactoryBean">
   <property name="location">
       <value>classpath:hibernate.properties</value>
   </property>
</bean>

<!-- data source configuration -->
    <bean id="dataSource"  class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close" >
       <property name="driverClassName" value="${jdbc.driverClassName}" />
        <!-- <property name="url" value="jdbc:mysql://${jdbc.host}:${jdbc.port}/${jdbc.database}?tcpKeepAlive=true"/> -->
       <property  name="url" value="${jdbc.url}" />
       <property name="username" value="${jdbc.user}" />
       <property name="password" value="${jdbc.pass}" />
    </bean>
 
   
    <bean  id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean" >
		<property name="dataSource" ref="dataSource"/>
         <property name="mappingLocations">
	     	<list>
	     	    <value>classpath:mapping/*.xml</value>
	    	<!-- <mapping resource="conf/Alert.hbm.xml" />
		<mapping resource="conf/Entity.hbm.xml" />
		<mapping resource="conf/FactData.hbm.xml" />
		<mapping resource="conf/TimeEvent.hbm.xml" />
		<mapping resource="conf/User.hbm.xml" />
		<mapping resource="conf/AlertTarget.hbm.xml" />
		<mapping resource="conf/LogAlert.hbm.xml" />
		<mapping resource="conf/RepeatType.hbm.xml" />
		<mapping resource="conf/Schedule.hbm.xml" />
		<mapping resource="conf/Task.hbm.xml" />
		<mapping resource="conf/JobQueue.hbm.xml" />
		<mapping resource="conf/LogTask.hbm.xml" />
		<mapping resource="conf/Exclude.hbm.xml" />
		<mapping resource="conf/LogNotification.hbm.xml" />
		<mapping resource="conf/Job.hbm.xml" />
		<mapping resource="conf/Metric.hbm.xml" />
		<mapping resource="conf/EntityGroup.hbm.xml" />
		<mapping resource="conf/ExtractSingle.hbm.xml" />
		<mapping resource="conf/EntityAlias.hbm.xml" />
		<mapping resource="conf/Country.hbm.xml" />
		<mapping resource="conf/ExtractTable.hbm.xml" />
		<mapping resource="conf/Column.hbm.xml" />
		<mapping resource="conf/InputSource.hbm.xml" /> -->
	     	</list>
    	</property>
    	<property name="hibernateProperties" ref="hibernateConfigProperties" >
        </property>
    </bean>
    
    
    
    <!-- ########## Start of bean configurations related to  Dao Classes ##########-->
  
    <bean id="userDao" class="com.pikefin.dao.impl.UserDaoImpl">
        <constructor-arg index="0" ref="sessionFactory"/>
    </bean>
    
   
    <!-- ###########	End of bean configurations related to Dao Classes		########## -->
   
   
   
    <!-- Velocity engine Configuration -->
    <bean id="velocityEngine" class="org.apache.velocity.app.VelocityEngine" />

    <!-- DB functions bean configuration, needs to be modified later -->
    <bean id="dbFunctions" class="com.pikefin.oldlogic.DBFunctions"  >
        <property name="dataSource" ref="dataSource" />
        <property name="url" value="${jdbc.url}" />
        <property name="user" value="${jdbc.user}" />
        <property name="sessionFactory" ref="sessionFactory" />
    </bean>

    <!-- Notification Bean -->
    <bean id="notificationId" class="com.pikefin.oldlogic.Notification">
       <constructor-arg index="0" ref="dbFunctions" />
    </bean>

    <!-- Log wrapper for writting logs -->
    <bean id="mainWrapper" class="pikefin.log4jWrapper.MainWrapper" >
    </bean>

    <bean  id="utilityFunctions" class="com.pikefin.oldlogic.UtilityFunctions" >
       <property name="mainWrapper" ref="mainWrapper" />
       <property name="emailUser"   value="${email.user}" />

        <property
            name="emailPassword"
            value="${email.pass}" />

        <property
            name="emailHost"
            value="${email.host}" />

        <property
            name="emailPort"
            value="${email.port}" />

        <property
            name="emailFromAddy"
            value="${email.fromaddy}" />

        <property
            name="emailCakeUrl"
            value="${email.cakebaseurl}" />

        <property
            name="emailPhpUrl"
            value="${email.phpbaseurl}" />

        <property
            name="emailSubjectText"
            value="${email.subjecttext}" />

        <property
            name="debugMode"
            value="${app.debugmode}" />

        <property
            name="ve"
            ref="velocityEngine" />
    </bean>

   
    

    <bean
        id="dataLoad"
        class="com.pikefin.oldlogic.DataLoad" >

        <property
            name="broker"
            ref="broker" />
    </bean>

    <bean
        id="broker"
        class="com.pikefin.oldlogic.Broker" >

        <property
            name="dbFunctions"
            ref="dbFunctions" />

        <property
            name="utilityFunctions"
            ref="utilityFunctions" />

        <property
            name="notification"
            ref="notificationId" />

        <!-- <property name="taskExecutor" ref="taskExecutor" /> -->

        <property
            name="debugMode"
            value="${app.debugmode}" />

        <property
            name="loadingHistoricalData"
            value="${app.historicaldata}" />

        <property
            name="sleepInterval"
            value="${app.sleep_interval}" />

        <property
            name="maxThreads"
            value="${app.max_threads}" />

        <!--
    <property name="threadList">
		<list>
			<bean id="dataGrab" class="pikefin.DataGrab">
				<property name="dbFunctions" ref="dbFunctions" />
				<property name="utilityFunctions" ref="utilityFunctions" />
				<property name="processingFunctions" ref="processingFunctions" />
			</bean>
			<bean id="dataGrab" class="pikefin.DataGrab">
				<property name="dbFunctions" ref="dbFunctions" />
				<property name="utilityFunctions" ref="utilityFunctions" />
				<property name="processingFunctions" ref="processingFunctions" />
			</bean>
			<bean id="dataGrab" class="pikefin.DataGrab">
				<property name="dbFunctions" ref="dbFunctions" />
				<property name="utilityFunctions" ref="utilityFunctions" />
				<property name="processingFunctions" ref="processingFunctions" />
			</bean>
			</list>
	</property>
        -->

    </bean>

    <!--
<bean id="dataGrab" class="pikefin.DataGrab">

	<property name="dbFunctions" ref="dbFunctions" />

	<property name="utilityFunctions" ref="utilityFunctions" />
</bean>
    -->


    <!--
<bean id="taskExecutor" class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
     <property name="corePoolSize" value="${app.max_threads}" />
     <property name="maxPoolSize" value="${app.max_threads}" />
     <property name="queueCapacity" value="3" />
</bean>
    -->

</beans>